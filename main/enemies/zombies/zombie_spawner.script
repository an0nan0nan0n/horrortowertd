helpers = require("utility.helpers") -- imports dump() & len() functions

local spawn_positions = { left = '/left_spawn', right = '/right_spawn' }
local zombie_spawn_limit = 10  -- Current spawn limit for zombies.

function init(self)
	pprint("zombie_spawner.script: url is " .. msg.url())
	-- Values for the zombie_spawner to track.
	self.current_spawn_side = 'left' -- First zombie spawns from the left.
	self.spawn_sides = {'left', 'right'} -- Both spawn sides for use in update_current_spawn_side()
	self.timeline_timer = 0  -- Used for the spawn timer formula in update()
	self.zombie_left_spawns = 0  -- Tracks the count for zombies spawned from the left.
	self.zombie_right_spawns = 0  -- Tracks the count for zombies spawned from the right.
	self.zombies_spawned = 0  -- Tracks the total count of zombies spawned, regardless of side.
	self.zombie_game_objects = {} -- Tracks spawned zombie game objects.
	self.zombie_types = { 'zombie_a', 'zombie_b', 'zombie_c', 'zombie_d' }  -- Possible zombie game objects from the main/enemies/zombies folder.

	-- Speed, max health, and damage dealt by spawned zombies.
	self.zombie_health = 0
	self.zombie_speed = 0
	self.zombie_damage = 0
	self.zombie_damage_delay = 0
	self.zombie_spawn_delay = 0
end

function on_message(self, message_id, message, sender)
	if message_id == hash("set_stat") then
		if message.stat == "health" then
			self.zombie_health = message.health
		elseif message.stat == "speed" then
			self.zombie_speed = message.speed
		elseif message.stat == "damage" then
			self.zombie_damage = message.damage
		elseif message.stat == "damage_delay" then
			self.zombie_damage_delay = message.damage_delay
		elseif message.stat == "spawn_delay" then
			self.zombie_spawn_delay = message.spawn_delay
		end
	end

	if message_id == hash("delete_zombie") then
		print(dump(self.zombie_game_objects))
		for key, zombie_id in pairs(self.zombie_game_objects) do
			if zombie_id == message.zombie_id then
				table.remove(self.zombie_game_objects, key)
				self.zombies_spawned = self.zombies_spawned - 1
			end
		end
	end
end
	
function update(self, dt)
	-- TODO: Update spawn timer formula.
	if self.zombie_spawn_delay ~= nil then
		self.timeline_timer = self.timeline_timer + dt
		local spawn_delay = math.random(self.zombie_spawn_delay, self.zombie_spawn_delay + 3)

		-- If the spawn delay is less than or equal to the spawn timer,
		-- & the current zombies spawned are not equal to the zombie spawn limit, spawn a new zombie.
		if spawn_delay <= self.timeline_timer and zombie_spawn_limit ~= self.zombies_spawned then
			zombie_type = self.zombie_types[math.random(1, len(self.zombie_types))]
			spawn_position = go.get_position(spawn_positions[self.current_spawn_side])
			spawn_zombie(self, zombie_type, spawn_position)
			self.timeline_timer = 0
		end
	end
end

function spawn_zombie(self, zombie_type, spawn_position)
	-- Spawns a zombie, calls the update functions for counts and spawn sides for the next zombie.
	-- Also flips the sprite for the zombie based on the side it spawns from.
	-- Tallies the newly created zombie sprite to the self.zombie_sprites table.
	if zombie_type ~= nil then
		-- Make new zombie game object.
		zombie_id = factory.create("/zombie_spawner#" .. zombie_type, spawn_position)
		zombie_sprite_url = msg.url(nil, zombie_id, "sprite")
		zombie_script_url = msg.url(nil, zombie_id, "script")

		-- Store the spawned zombie in a table.
		table.insert(self.zombie_game_objects, zombie_id)

		-- Flip the sprite if it spawns from the right since default facing is left, then play its animations.
		if self.current_spawn_side == 'right' then
			sprite.set_hflip(zombie_sprite_url, true)
		end

		msg.post(zombie_script_url, 'set_stat', { stat = 'speed', speed = self.zombie_speed })
		msg.post(zombie_script_url, 'set_stat', { stat = 'damage', damage = self.zombie_damage })
		msg.post(zombie_script_url, 'set_stat', { stat = 'damage_delay', damage_delay = self.zombie_damage_delay })
		msg.post(zombie_script_url, 'set_stat', { stat = 'health', health = self.zombie_health })
		msg.post(zombie_script_url, 'set_stat', { stat = 'spawn_side', spawn_side = self.current_spawn_side })
		msg.post(zombie_script_url, "set_move_direction", { direction=self.current_spawn_side })
		msg.post(zombie_sprite_url, "play_animation", { id=hash("walk_forward") })
		print('zombie_spawner.script: zombie spawned from ' .. self.current_spawn_side .. ' side.')
	end

	-- Update counts and spawn side for the next zombie if we spawn one again.
	update_zombie_spawn_count(self)
	update_current_spawn_side(self)
end

function update_zombie_spawn_count(self)
	-- Tracks how many zombies are spawned total and logs to self.zombies_spawned.
	if self.current_spawn_side == 'left' then
		self.zombie_left_spawns = self.zombie_left_spawns + 1
	elseif self.current_spawn_side == 'right' then
		self.zombie_right_spawns = self.zombie_right_spawns + 1
	end
	self.zombies_spawned = self.zombies_spawned + 1
end

function update_current_spawn_side(self)
	-- Changes the side for zombies to spawn from, based on the amount of zombies on each side.
	if self.zombie_left_spawns > self.zombie_right_spawns then
		new_side = self.spawn_sides[2]  -- right side
	elseif self.zombie_right_spawns > self.zombie_left_spawns then
		new_side = self.spawn_sides[1]  -- left side
	else
		new_side = self.spawn_sides[math.random(1, len(self.spawn_sides))]
	end
	self.current_spawn_side = new_side
end
