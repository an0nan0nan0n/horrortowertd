pprint('game.script: Loading game.script for game screen. Be sure to place this script inside of a "controller" game object for a collection.')

-- Set properties that can be tweaked for the game without need to modify the script logic.
go.property("health", 100)
go.property("ammo", 100)
go.property("gold", 1)
go.property("tier", 1)
go.property("zombie spawn delay", 2)
go.property("zombie max health", 5)
go.property("zombie damage", 10)
go.property("zombie damage delay", 5)
go.property("zombie speed", 35)  -- Higher is faster
go.property("bat spawn delay", 5)
go.property("bat max health", 10)
go.property("bat damage", 5)
go.property("bat damage delay", 10)
go.property("bat speed", 2)  -- Lower is faster
go.property("shoot damage", 5)

function init(self)
	pprint("game.script: url is " .. msg.url())

	-- Player game values.
	self.health = go.get("/controller#game", "health")
	self.ammo = go.get("/controller#game", "ammo")
	self.gold = go.get("/controller#game", "gold")
	self.tier = go.get("/controller#game", "tier")
	self.current_ability = nil

	-- Set UI starting values.
	msg.post("/ui#player_ui", "set_stat", { stat = 'health', health = self.health })
	msg.post("/ui#player_ui", "set_stat", { stat = 'ammo', ammo = self.ammo })

	-- Player debug options.
	-- TODO: Remove in final version.
	self.player_god_mode_enabled = false

	-- Enemy game values.	
	self.enemy_values = { 
		zombie = {
			spawn_delay = go.get("/controller#game", "zombie spawn delay"),
			speed = go.get("/controller#game", "zombie speed"),
			health = go.get("/controller#game", "zombie max health"),
			damage = go.get("/controller#game", "zombie damage"),
			damage_delay = go.get("/controller#game", "zombie damage delay")
		},
		bat = {
			spawn_delay = go.get("/controller#game", "bat spawn delay"),
			speed = go.get("/controller#game", "bat speed"),
			health = go.get("/controller#game", "bat max health"),
			damage = go.get("/controller#game", "bat damage"),
			damage_delay = go.get("/controller#game", "bat damage delay")
		},
	}
	-- TODO: Make for loop.
	msg.post('/zombie_spawner#zombie_spawner', 'set_stat', { stat = 'spawn_delay', spawn_delay = self.enemy_values.zombie.spawn_delay })
	msg.post('/zombie_spawner#zombie_spawner', 'set_stat', { stat = 'speed', speed = self.enemy_values.zombie.speed })
	msg.post('/zombie_spawner#zombie_spawner', 'set_stat', { stat = 'health', health = self.enemy_values.zombie.health })
	msg.post('/zombie_spawner#zombie_spawner', 'set_stat', { stat = 'damage', damage = self.enemy_values.zombie.damage })
	msg.post('/zombie_spawner#zombie_spawner', 'set_stat', { stat = 'damage_delay', damage_delay = self.enemy_values.zombie.damage_delay })
	msg.post('/bat_spawner#bat_spawner', 'set_stat', { stat = 'spawn_delay', spawn_delay = self.enemy_values.bat.spawn_delay })
	msg.post('/bat_spawner#bat_spawner', 'set_stat', { stat = 'speed', speed = self.enemy_values.bat.speed })
	msg.post('/bat_spawner#bat_spawner', 'set_stat', { stat = 'health', health = self.enemy_values.bat.health })
	msg.post('/bat_spawner#bat_spawner', 'set_stat', { stat = 'damage', damage = self.enemy_values.bat.damage })
	msg.post('/bat_spawner#bat_spawner', 'set_stat', { stat = 'damage_delay', damage_delay = self.enemy_values.bat.damage_delay })
end

function update(self)
	-- Game update loop.
	-- If the player ever reaches or drops below 0 health, kill them.
	if self.health <= 0 and self.player_god_mode_enabled == false then
		msg.post("level_loader:/level_loader#script", "kill_player")
	end
end

function on_message(self, message_id, message, sender)
	-- Message handler for game events.
	-- Filter all actions through here.

	--------------------------------
	---- Begin player functions ----
	--- i.e. kill, heal, damage ----
	--------------------------------
	if message_id == hash("add_health") and self.player_god_mode_enabled == false then
		self.health = self.health + message.health
		msg.post("/ui#player_ui", "update_health_ui", { health_value_to_set = self.health })
	end

	if message_id == hash("subtract_health") and self.player_god_mode_enabled == false then
		self.health = self.health - message.health
		if self.health > 100 then
			self.health = 100
		end
		msg.post("/ui#player_ui", "update_health_ui", { health_value_to_set = self.health })
	end

	if message_id == hash("reload_activated") and self.ammo <= 99 then
		self.ammo = self.ammo + message.ammo
		if self.ammo > 100 then
			self.ammo = 100
		end
		msg.post("/ui#player_ui", "update_ammo_ui", { ammo_value_to_set = self.ammo })
		timer.delay(10, true, function(self, handle, time_elapsed)
			msg.post("/ui#player_ui", "reload_ready")
		end)
	end

	if message_id == hash("kill_player") and self.player_god_mode_enabled == false then
		msg.post("level_loader:/level_loader#script", "kill_player")
	end

	----------------------------
	-- Begin player abilities --
	----------------------------
	if message_id == hash("set_ability") then
		-- Select the current player ability based on the UI ability button tapped.
		self.current_ability = message.ability
		pprint('game.script: Player selected ability: ' .. self.current_ability)
	end
	
	-- "Shoot" ability.
	-- Fires a shot at the location the player taps and deals damage while depleting ammo.
	if message_id == hash("shoot") and self.current_ability == 'shoot' then
		if self.ammo >= 5 then
			msg.post("/shoot_ability", "shoot", { spawn_position = message.spawn_position } )
			self.ammo = self.ammo - 5
			msg.post("/ui#player_ui", "update_ammo_ui", { ammo_value_to_set = self.ammo })
			pprint('game.script: player lost 5 ammo from shooting, ammo remaining: ' .. self.ammo)
		elseif self.ammo < 5 or self.ammo <= 0 then
			msg.post("/fmod#fmod", "play_pistol_empty")
		end
	end
end

-- TODO: 
-- function enable_god_mode(self)
-- 	-- Makes the player unkillable, mainly used for debugging.
-- 	self.player_god_mode_enabled = true
-- end
-- 
-- function disable_god_mode(self)
-- 	-- Makes the player unkillable, mainly used for debugging.
-- 	self.player_god_mode_enabled = false
-- end

pprint('game.script: Successfully loaded.')