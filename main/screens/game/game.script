pprint('game.script: Loading game.script for game screen. Be sure to place this script inside of a "controller" game object for a collection.')

-- Set properties that can be tweaked for the game without need to modify the script logic.
go.property("health", 100)
go.property("ammo", 100)
go.property("gold", 1)
go.property("tier", 1)

function init(self)
	pprint("game.script: url is " .. msg.url())
	self.health = go.get("/controller#game", "health")
	self.ammo = go.get("/controller#game", "ammo")
	self.gold = go.get("/controller#game", "gold")
	self.tier = go.get("/controller#game", "tier")
	self.current_ability = nil
	pprint('game.script: initialized.')
	pprint('game.script: health: ' .. self.health)
	pprint('game.script: ammo: ' .. self.ammo)
	pprint('game.script: gold: ' .. self.gold)
	pprint('game.script: tier: ' .. self.tier)
	
	-- Load FMOD sound banks.
	-- msg.post("main:/fmod#fmod", "load_banks")
	-- msg.post("main:/fmod#fmod", "intro_song")
end

function update(self)
	-- Game update loop.
	-- If the player ever reaches or drops below 0 health, kill them.
	if self.health <= 0 then
		msg.post("level_loader:/level_loader#script", "kill_player")
	end
end

function on_message(self, message_id, message, sender)
	-- Message handler for game events.
	-- Filter all actions through here.

	-----------------------------
	--- Begin main functions ---
	-- i.e. kill, heal, damage --
	-----------------------------
	if message_id == hash("add_health") then
		self.health = self.health + message.health
		msg.post("/ui#player_ui", "update_health_ui", { health_value_to_set = self.health })
	end
	if message_id == hash("subtract_health") then
		self.health = self.health - message.health
		msg.post("/ui#player_ui", "update_health_ui", { health_value_to_set = self.health })
	end
	if message_id == hash("kill_player") then
		msg.post("level_loader:/level_loader#script", "kill_player")
	end

	---------------------
	-- Begin abilities --
	---------------------
	if message_id == hash("set_ability") then
		-- Select the current player ability based on the UI ability button tapped.
		self.current_ability = message.ability
		pprint('game.script: Player selected ability: ' .. self.current_ability)
	end
	
	-- "Shoot" ability.
	-- Fires a shot at the location the player taps and deals damage while depleting ammo.
	if message_id == hash("shoot") and self.current_ability == 'shoot' then
		if self.ammo >= 5 then
		msg.post("/shoot_ability", "shoot", { spawn_position = message.spawn_position } )
		self.ammo = self.ammo - 5
		-- TODO: msg.post("/ui#player_ui", "update_ammo_ui", { ammo_value_to_set = self.ammo })
		pprint('game.script: player lost 5 ammo from shooting, ammo remaining: ' .. self.ammo)
		elseif self.ammo < 5 or self.ammo <= 0 then
			pprint('game.script: player needs at least 5 ammo to cast shoot.')
		end
	end
end

pprint('game.script: Successfully loaded.')